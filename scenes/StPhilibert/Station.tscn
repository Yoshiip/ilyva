[gd_scene load_steps=10 format=2]

[ext_resource path="res://images/portraits/st_philibert/mathieu.png" type="Texture" id=1]
[ext_resource path="res://images/backgrounds/saint_philibert/surface.jpg" type="Texture" id=2]
[ext_resource path="res://images/items/nano.png" type="Texture" id=3]
[ext_resource path="res://images/portraits/st_philibert/thomas.png" type="Texture" id=4]
[ext_resource path="res://scripts/Zone.gd" type="Script" id=5]
[ext_resource path="res://prefabs/2d/Character.tscn" type="PackedScene" id=7]
[ext_resource path="res://prefabs/Arrow.tscn" type="PackedScene" id=8]

[sub_resource type="Shader" id=11]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment(){
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o;
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 11 )
shader_param/fov = 90.0
shader_param/cull_back = true
shader_param/y_rot = 0.0
shader_param/x_rot = 50.0
shader_param/inset = 0.0

[node name="Root" type="Node2D"]
pause_mode = 1
script = ExtResource( 5 )
zone_id = "saint_philibert"
zone_name = "Saint-Philibert"
time = "Matin"

[node name="Background" type="Sprite" parent="."]
z_index = -64
texture = ExtResource( 2 )

[node name="Subway" parent="." instance=ExtResource( 8 )]
position = Vector2( 134, 310 )
__meta__ = {
"_edit_group_": true
}
scene_name = "subway"
condition = "can_use_subway"
show_confirm = true

[node name="Icon" parent="Subway" index="0"]
material = SubResource( 10 )

[node name="Mathieu" parent="." instance=ExtResource( 7 )]
position = Vector2( 497, 304 )
portrait = ExtResource( 1 )
sprite_scale = 0.25
max_story_progress = 2

[node name="Thomas" parent="." instance=ExtResource( 7 )]
position = Vector2( -138, 376 )
portrait = ExtResource( 4 )
sprite_scale = 0.25
max_story_progress = 2

[node name="Nano" parent="." instance=ExtResource( 7 )]
position = Vector2( 494, 381 )
icon_type = 1
one_time_interact = true
portrait = ExtResource( 3 )
min_story_progress = 1
max_story_progress = -1

[node name="Action" parent="." instance=ExtResource( 8 )]
position = Vector2( 766, 310 )
__meta__ = {
"_edit_group_": true
}
scene_name = "StPhilibert/Action"
condition = "action_unlocked"

[node name="Icon" parent="Action" index="0"]
material = SubResource( 10 )

[editable path="Subway"]
[editable path="Action"]
